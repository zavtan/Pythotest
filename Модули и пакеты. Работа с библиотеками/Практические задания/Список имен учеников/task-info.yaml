type: edu
files:
- name: task.py
  visible: true
  placeholders:
  - offset: 0
    length: 41
    placeholder_text: '# TODO Напишите функцию get_student_names'
    initial_state:
      length: 41
      offset: 0
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      def get_student_names(students: list[dict]) -> list[str]:
          """Функция для извлечения списка имен учеников из списка словарей с информацией о них."""
          return [student["name"] for student in students]
  - offset: 493
    length: 41
    placeholder_text: '# TODO Вызовите функцию get_student_names'
    initial_state:
      length: 41
      offset: 493
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: print(get_student_names(students_list))
  text: |
    # TODO Напишите функцию get_student_names


    if __name__ == '__main__':
        # Пример списка учеников
        students_list = [
            {
                "name": "Саша",
                "age": 27,
            },
            {
                "name": "Кирилл",
                "age": 52,
            },
            {
                "name": "Маша",
                "age": 14,
            },
            {
                "name": "Петя",
                "age": 36,
            },
            {
                "name": "Оля",
                "age": 43,
            },
        ]
        # TODO Вызовите функцию get_student_names
  learner_created: false
- name: tests/test_task.py
  visible: false
  text: |
    import ast
    import unittest

    try:
        from task import get_student_names
    except ImportError:
        raise AssertionError(
            'Напишите функцию `get_student_names`'
        )


    def contains_list_comprehension(code):
        tree = ast.parse(code)
        for node in ast.walk(tree):
            if isinstance(node, ast.ListComp):
                return True
        return False


    class TestCase(unittest.TestCase):
        def test_contains_list_comprehension(self):
            filepath = "task.py"
            with open(filepath) as f:
                assert contains_list_comprehension(f.read()) is True, (
                    'Проверьте, что в функции `get_student_names` используется list comprehension.'
                )

        def test_correct_value(self):
            students = [
                {
                    "name": "Саша",
                    "age": 27,
                },
                {
                    "name": "Кирилл",
                    "age": 52,
                },
                {
                    "name": "Маша",
                    "age": 14,
                },
                {
                    "name": "Петя",
                    "age": 36,
                },
                {
                    "name": "Оля",
                    "age": 43,
                },
            ]
            expected_value = ['Саша', 'Кирилл', 'Маша', 'Петя', 'Оля']
            actual_value = get_student_names(students)

            assert actual_value == expected_value, (
                'Проверьте, что в функция `get_student_names` возвращает имена из списка словарей по ключу `name`'
            )
  learner_created: false
- name: __init__.py
  visible: false
  learner_created: false
- name: tests/__init__.py
  visible: false
  learner_created: false
status: Unchecked
record: -1
