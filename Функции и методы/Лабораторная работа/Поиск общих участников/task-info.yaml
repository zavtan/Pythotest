type: edu
files:
- name: task.py
  visible: true
  placeholders:
  - offset: 0
    length: 48
    placeholder_text: '# TODO Напишите функцию find_common_participants'
    initial_state:
      length: 48
      offset: 0
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      def find_common_participants(participants1, participants2, separator=','):
          participants_list1 = participants1.split(separator)
          participants_list2 = participants2.split(separator)

          common_participants = list(set(participants_list1).intersection(participants_list2))
          common_participants.sort()

          return common_participants
  - offset: 156
    length: 65
    placeholder_text: '# TODO Провеьте работу функции с разделителем отличным от запятой'
    initial_state:
      length: 65
      offset: 156
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      participants = find_common_participants(participants_first_group, participants_second_group)
      print("Общие участники:", participants)
  text: |
    # TODO Напишите функцию find_common_participants


    participants_first_group = "Иванов|Петров|Сидоров"
    participants_second_group = "Петров|Сидоров|Смирнов"

    # TODO Провеьте работу функции с разделителем отличным от запятой
  learner_created: false
- name: tests/test_task.py
  visible: false
  text: |
    import inspect
    import unittest

    try:
        from task import find_common_participants
    except ImportError:
        raise AssertionError(
            'Проверьте, что объявлена функция `find_common_participants`'
        )


    class TestCase(unittest.TestCase):
        @classmethod
        def setUpClass(cls) -> None:
            sign = inspect.signature(find_common_participants)
            assert len(sign.parameters) == 3, (
                'Убедитесь, что при объявлении функции `find_common_participants` '
                'указано три аргумента.'
            )

            first_arg, second_arg, third_arg = inspect.signature(find_common_participants).parameters.values()
            assert first_arg.default == inspect.Parameter.empty, (
                f'Убедитесь, что первый аргумент {first_arg.name} функции '
                f'`find_common_participants` является позиционным аргументом.'
            )

            assert second_arg.default == inspect.Parameter.empty, (
                f'Убедитесь, что первый аргумент {second_arg.name} функции '
                f'`find_common_participants` является позиционным аргументом.'
            )

            expected_default_value = ','
            assert third_arg.default == expected_default_value, (
                f'Убедитесь, что третий аргумент {third_arg.name} функции '
                f'`find_common_participants` является аргументом по умолчанию.'
            )

        def test_find_common_participants(self):
            participants1 = "Иванов,Петров,Сидоров"
            participants2 = "Петров,Сидоров,Смирнов"

            expected_result = ['Петров', 'Сидоров']
            actual_result = find_common_participants(participants1, participants2)

            assert isinstance(actual_result, list), (
                'Убедитесь, что функция `find_common_participants` возвращает список.'
            )

            assert actual_result == expected_result, (
                'Убедитесь, что верно реализована логика нахождения '
                'общих участников в функции `find_common_participants`'
            )

        def test_find_common_participants_other_sep(self):
            participants1 = "Иванов;Петров;Сидоров"
            participants2 = "Петров;Сидоров;Смирнов"
            sep = ";"

            expected_result = ['Петров', 'Сидоров']
            actual_result = find_common_participants(participants1, participants2, sep)

            assert actual_result == expected_result, (
                'Убедитесь, что функция `find_common_participants` '
                'умеет разделять строку с участниками отличным от запятой.'
            )
  learner_created: false
- name: __init__.py
  visible: false
  learner_created: false
- name: tests/__init__.py
  visible: false
  learner_created: false
status: Unchecked
record: -1
solution_hidden: true
